// Code generated by unionize.
package vm

import (
	"unsafe"
)

type entryUnion struct {
	data [5]uint64
}

func (u *entryUnion) ret() stackRet {
	return *(*stackRet)(unsafe.Pointer(&u.data))
}
func (u *entryUnion) retPut(v stackRet) {
	*(*stackRet)(unsafe.Pointer(&u.data)) = v
}

func (u *entryUnion) btrack() stackBacktrack {
	return *(*stackBacktrack)(unsafe.Pointer(&u.data))
}
func (u *entryUnion) btrackPut(v stackBacktrack) {
	*(*stackBacktrack)(unsafe.Pointer(&u.data)) = v
}

// manually added
func (u *entryUnion) btrackPtr() *stackBacktrack {
	return (*stackBacktrack)(unsafe.Pointer(&u.data))
}

func (u *entryUnion) memo() stackMemo {
	return *(*stackMemo)(unsafe.Pointer(&u.data))
}
func (u *entryUnion) memoPut(v stackMemo) {
	*(*stackMemo)(unsafe.Pointer(&u.data)) = v
}
